searchState.loadedDescShard("flycheck", 0, "Flycheck provides the functionality needed to run …\nRequest adding a diagnostic with fixes included to a file\nWhether a suggestion can be safely applied.\nRequest clearing all previous diagnostics\nA diagnostic message generated by rustc\nThe error code associated to this diagnostic.\nThe diagnostic level\nA section of the source code associated with a Diagnostic\nMacro expansion information associated with a diagnostic.\nError\nFailure note\nFlycheck wraps the shared state and communication …\nThe suggested replacement has placeholders that will need …\nHelp\nInternal compiler error\nThe suggested replacement can be applied automatically …\nThe suggested replacement may be incorrect in some …\nNote\nRequest check progress notification to client\nThe suggested replacement will probably not work.\nWarning\nThe byte offset in the file where this diagnostic ends.\nThe byte offset in the file where this diagnostic starts …\nStop this cargo check worker.\nAssociated diagnostic messages.\nThe code itself.\nThe associated error code for this diagnostic\n1-based, character offset.\n1-based, character offset.\nspan where macro was defined (if known)\nMacro invocations that created the code at this span, if …\nAn explanation for the code\nThe file name or the macro name this diagnostic comes from.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a “primary” span – meaning the point, or one …\nLabel that should be placed at this location (if any)\n“error: internal compiler error”, “error”, “…\n1-based. The line in the file.\n1-based. The line in the file.\nname of macro that was applied (e.g., “foo!” or “#[…\nThe error message of this diagnostic.\nThe message as rustc would render it\nSchedule a re-start of the cargo check worker to do a …\nSchedule a re-start of the cargo check worker to do a …\nspan where macro was applied to generate this code; note …\nA list of source code spans this diagnostic is associated …\nIf we are suggesting a replacement, this will contain text …\nIf the suggestion is approximate\nSource text from the start of line_start to the end of …\nFlycheck instance ID")